// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: Messages.proto

#include "Messages.pb.h"
#include "Messages.grpc.pb.h"

#include <functional>
#include <grpcpp/support/async_stream.h>
#include <grpcpp/support/async_unary_call.h>
#include <grpcpp/impl/channel_interface.h>
#include <grpcpp/impl/client_unary_call.h>
#include <grpcpp/support/client_callback.h>
#include <grpcpp/support/message_allocator.h>
#include <grpcpp/support/method_handler.h>
#include <grpcpp/impl/rpc_service_method.h>
#include <grpcpp/support/server_callback.h>
#include <grpcpp/impl/server_callback_handlers.h>
#include <grpcpp/server_context.h>
#include <grpcpp/impl/service_type.h>
#include <grpcpp/support/sync_stream.h>

static const char* EmployeeService_method_names[] = {
  "/EmployeeService/GetByNo",
  "/EmployeeService/GetAll",
  "/EmployeeService/AddPhoto",
  "/EmployeeService/Save",
  "/EmployeeService/SaveAll",
  "/EmployeeService/CreateToken",
};

std::unique_ptr< EmployeeService::Stub> EmployeeService::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< EmployeeService::Stub> stub(new EmployeeService::Stub(channel, options));
  return stub;
}

EmployeeService::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options)
  : channel_(channel), rpcmethod_GetByNo_(EmployeeService_method_names[0], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetAll_(EmployeeService_method_names[1], options.suffix_for_stats(),::grpc::internal::RpcMethod::SERVER_STREAMING, channel)
  , rpcmethod_AddPhoto_(EmployeeService_method_names[2], options.suffix_for_stats(),::grpc::internal::RpcMethod::CLIENT_STREAMING, channel)
  , rpcmethod_Save_(EmployeeService_method_names[3], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_SaveAll_(EmployeeService_method_names[4], options.suffix_for_stats(),::grpc::internal::RpcMethod::BIDI_STREAMING, channel)
  , rpcmethod_CreateToken_(EmployeeService_method_names[5], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  {}

::grpc::Status EmployeeService::Stub::GetByNo(::grpc::ClientContext* context, const ::GetByNoRequest& request, ::EmployeeResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::GetByNoRequest, ::EmployeeResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_GetByNo_, context, request, response);
}

void EmployeeService::Stub::async::GetByNo(::grpc::ClientContext* context, const ::GetByNoRequest* request, ::EmployeeResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::GetByNoRequest, ::EmployeeResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetByNo_, context, request, response, std::move(f));
}

void EmployeeService::Stub::async::GetByNo(::grpc::ClientContext* context, const ::GetByNoRequest* request, ::EmployeeResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetByNo_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::EmployeeResponse>* EmployeeService::Stub::PrepareAsyncGetByNoRaw(::grpc::ClientContext* context, const ::GetByNoRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::EmployeeResponse, ::GetByNoRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_GetByNo_, context, request);
}

::grpc::ClientAsyncResponseReader< ::EmployeeResponse>* EmployeeService::Stub::AsyncGetByNoRaw(::grpc::ClientContext* context, const ::GetByNoRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncGetByNoRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::ClientReader< ::EmployeeResponse>* EmployeeService::Stub::GetAllRaw(::grpc::ClientContext* context, const ::GetAllRequest& request) {
  return ::grpc::internal::ClientReaderFactory< ::EmployeeResponse>::Create(channel_.get(), rpcmethod_GetAll_, context, request);
}

void EmployeeService::Stub::async::GetAll(::grpc::ClientContext* context, const ::GetAllRequest* request, ::grpc::ClientReadReactor< ::EmployeeResponse>* reactor) {
  ::grpc::internal::ClientCallbackReaderFactory< ::EmployeeResponse>::Create(stub_->channel_.get(), stub_->rpcmethod_GetAll_, context, request, reactor);
}

::grpc::ClientAsyncReader< ::EmployeeResponse>* EmployeeService::Stub::AsyncGetAllRaw(::grpc::ClientContext* context, const ::GetAllRequest& request, ::grpc::CompletionQueue* cq, void* tag) {
  return ::grpc::internal::ClientAsyncReaderFactory< ::EmployeeResponse>::Create(channel_.get(), cq, rpcmethod_GetAll_, context, request, true, tag);
}

::grpc::ClientAsyncReader< ::EmployeeResponse>* EmployeeService::Stub::PrepareAsyncGetAllRaw(::grpc::ClientContext* context, const ::GetAllRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncReaderFactory< ::EmployeeResponse>::Create(channel_.get(), cq, rpcmethod_GetAll_, context, request, false, nullptr);
}

::grpc::ClientWriter< ::AddPhotoRequest>* EmployeeService::Stub::AddPhotoRaw(::grpc::ClientContext* context, ::AddPhotoResponse* response) {
  return ::grpc::internal::ClientWriterFactory< ::AddPhotoRequest>::Create(channel_.get(), rpcmethod_AddPhoto_, context, response);
}

void EmployeeService::Stub::async::AddPhoto(::grpc::ClientContext* context, ::AddPhotoResponse* response, ::grpc::ClientWriteReactor< ::AddPhotoRequest>* reactor) {
  ::grpc::internal::ClientCallbackWriterFactory< ::AddPhotoRequest>::Create(stub_->channel_.get(), stub_->rpcmethod_AddPhoto_, context, response, reactor);
}

::grpc::ClientAsyncWriter< ::AddPhotoRequest>* EmployeeService::Stub::AsyncAddPhotoRaw(::grpc::ClientContext* context, ::AddPhotoResponse* response, ::grpc::CompletionQueue* cq, void* tag) {
  return ::grpc::internal::ClientAsyncWriterFactory< ::AddPhotoRequest>::Create(channel_.get(), cq, rpcmethod_AddPhoto_, context, response, true, tag);
}

::grpc::ClientAsyncWriter< ::AddPhotoRequest>* EmployeeService::Stub::PrepareAsyncAddPhotoRaw(::grpc::ClientContext* context, ::AddPhotoResponse* response, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncWriterFactory< ::AddPhotoRequest>::Create(channel_.get(), cq, rpcmethod_AddPhoto_, context, response, false, nullptr);
}

::grpc::Status EmployeeService::Stub::Save(::grpc::ClientContext* context, const ::EmployeeRequest& request, ::EmployeeResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::EmployeeRequest, ::EmployeeResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_Save_, context, request, response);
}

void EmployeeService::Stub::async::Save(::grpc::ClientContext* context, const ::EmployeeRequest* request, ::EmployeeResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::EmployeeRequest, ::EmployeeResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_Save_, context, request, response, std::move(f));
}

void EmployeeService::Stub::async::Save(::grpc::ClientContext* context, const ::EmployeeRequest* request, ::EmployeeResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_Save_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::EmployeeResponse>* EmployeeService::Stub::PrepareAsyncSaveRaw(::grpc::ClientContext* context, const ::EmployeeRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::EmployeeResponse, ::EmployeeRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_Save_, context, request);
}

::grpc::ClientAsyncResponseReader< ::EmployeeResponse>* EmployeeService::Stub::AsyncSaveRaw(::grpc::ClientContext* context, const ::EmployeeRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncSaveRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::ClientReaderWriter< ::EmployeeRequest, ::EmployeeResponse>* EmployeeService::Stub::SaveAllRaw(::grpc::ClientContext* context) {
  return ::grpc::internal::ClientReaderWriterFactory< ::EmployeeRequest, ::EmployeeResponse>::Create(channel_.get(), rpcmethod_SaveAll_, context);
}

void EmployeeService::Stub::async::SaveAll(::grpc::ClientContext* context, ::grpc::ClientBidiReactor< ::EmployeeRequest,::EmployeeResponse>* reactor) {
  ::grpc::internal::ClientCallbackReaderWriterFactory< ::EmployeeRequest,::EmployeeResponse>::Create(stub_->channel_.get(), stub_->rpcmethod_SaveAll_, context, reactor);
}

::grpc::ClientAsyncReaderWriter< ::EmployeeRequest, ::EmployeeResponse>* EmployeeService::Stub::AsyncSaveAllRaw(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq, void* tag) {
  return ::grpc::internal::ClientAsyncReaderWriterFactory< ::EmployeeRequest, ::EmployeeResponse>::Create(channel_.get(), cq, rpcmethod_SaveAll_, context, true, tag);
}

::grpc::ClientAsyncReaderWriter< ::EmployeeRequest, ::EmployeeResponse>* EmployeeService::Stub::PrepareAsyncSaveAllRaw(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncReaderWriterFactory< ::EmployeeRequest, ::EmployeeResponse>::Create(channel_.get(), cq, rpcmethod_SaveAll_, context, false, nullptr);
}

::grpc::Status EmployeeService::Stub::CreateToken(::grpc::ClientContext* context, const ::TokenRequest& request, ::TokenResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::TokenRequest, ::TokenResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_CreateToken_, context, request, response);
}

void EmployeeService::Stub::async::CreateToken(::grpc::ClientContext* context, const ::TokenRequest* request, ::TokenResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::TokenRequest, ::TokenResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_CreateToken_, context, request, response, std::move(f));
}

void EmployeeService::Stub::async::CreateToken(::grpc::ClientContext* context, const ::TokenRequest* request, ::TokenResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_CreateToken_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::TokenResponse>* EmployeeService::Stub::PrepareAsyncCreateTokenRaw(::grpc::ClientContext* context, const ::TokenRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::TokenResponse, ::TokenRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_CreateToken_, context, request);
}

::grpc::ClientAsyncResponseReader< ::TokenResponse>* EmployeeService::Stub::AsyncCreateTokenRaw(::grpc::ClientContext* context, const ::TokenRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncCreateTokenRaw(context, request, cq);
  result->StartCall();
  return result;
}

EmployeeService::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      EmployeeService_method_names[0],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< EmployeeService::Service, ::GetByNoRequest, ::EmployeeResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](EmployeeService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::GetByNoRequest* req,
             ::EmployeeResponse* resp) {
               return service->GetByNo(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      EmployeeService_method_names[1],
      ::grpc::internal::RpcMethod::SERVER_STREAMING,
      new ::grpc::internal::ServerStreamingHandler< EmployeeService::Service, ::GetAllRequest, ::EmployeeResponse>(
          [](EmployeeService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::GetAllRequest* req,
             ::grpc::ServerWriter<::EmployeeResponse>* writer) {
               return service->GetAll(ctx, req, writer);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      EmployeeService_method_names[2],
      ::grpc::internal::RpcMethod::CLIENT_STREAMING,
      new ::grpc::internal::ClientStreamingHandler< EmployeeService::Service, ::AddPhotoRequest, ::AddPhotoResponse>(
          [](EmployeeService::Service* service,
             ::grpc::ServerContext* ctx,
             ::grpc::ServerReader<::AddPhotoRequest>* reader,
             ::AddPhotoResponse* resp) {
               return service->AddPhoto(ctx, reader, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      EmployeeService_method_names[3],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< EmployeeService::Service, ::EmployeeRequest, ::EmployeeResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](EmployeeService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::EmployeeRequest* req,
             ::EmployeeResponse* resp) {
               return service->Save(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      EmployeeService_method_names[4],
      ::grpc::internal::RpcMethod::BIDI_STREAMING,
      new ::grpc::internal::BidiStreamingHandler< EmployeeService::Service, ::EmployeeRequest, ::EmployeeResponse>(
          [](EmployeeService::Service* service,
             ::grpc::ServerContext* ctx,
             ::grpc::ServerReaderWriter<::EmployeeResponse,
             ::EmployeeRequest>* stream) {
               return service->SaveAll(ctx, stream);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      EmployeeService_method_names[5],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< EmployeeService::Service, ::TokenRequest, ::TokenResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](EmployeeService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::TokenRequest* req,
             ::TokenResponse* resp) {
               return service->CreateToken(ctx, req, resp);
             }, this)));
}

EmployeeService::Service::~Service() {
}

::grpc::Status EmployeeService::Service::GetByNo(::grpc::ServerContext* context, const ::GetByNoRequest* request, ::EmployeeResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status EmployeeService::Service::GetAll(::grpc::ServerContext* context, const ::GetAllRequest* request, ::grpc::ServerWriter< ::EmployeeResponse>* writer) {
  (void) context;
  (void) request;
  (void) writer;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status EmployeeService::Service::AddPhoto(::grpc::ServerContext* context, ::grpc::ServerReader< ::AddPhotoRequest>* reader, ::AddPhotoResponse* response) {
  (void) context;
  (void) reader;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status EmployeeService::Service::Save(::grpc::ServerContext* context, const ::EmployeeRequest* request, ::EmployeeResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status EmployeeService::Service::SaveAll(::grpc::ServerContext* context, ::grpc::ServerReaderWriter< ::EmployeeResponse, ::EmployeeRequest>* stream) {
  (void) context;
  (void) stream;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status EmployeeService::Service::CreateToken(::grpc::ServerContext* context, const ::TokenRequest* request, ::TokenResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


