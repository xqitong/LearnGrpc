// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: Messages.proto
#ifndef GRPC_Messages_2eproto__INCLUDED
#define GRPC_Messages_2eproto__INCLUDED

#include "Messages.pb.h"

#include <functional>
#include <grpcpp/generic/async_generic_service.h>
#include <grpcpp/support/async_stream.h>
#include <grpcpp/support/async_unary_call.h>
#include <grpcpp/support/client_callback.h>
#include <grpcpp/client_context.h>
#include <grpcpp/completion_queue.h>
#include <grpcpp/support/message_allocator.h>
#include <grpcpp/support/method_handler.h>
#include <grpcpp/impl/proto_utils.h>
#include <grpcpp/impl/rpc_method.h>
#include <grpcpp/support/server_callback.h>
#include <grpcpp/impl/server_callback_handlers.h>
#include <grpcpp/server_context.h>
#include <grpcpp/impl/service_type.h>
#include <grpcpp/support/status.h>
#include <grpcpp/support/stub_options.h>
#include <grpcpp/support/sync_stream.h>

class EmployeeService final {
 public:
  static constexpr char const* service_full_name() {
    return "EmployeeService";
  }
  class StubInterface {
   public:
    virtual ~StubInterface() {}
    virtual ::grpc::Status GetByNo(::grpc::ClientContext* context, const ::GetByNoRequest& request, ::EmployeeResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::EmployeeResponse>> AsyncGetByNo(::grpc::ClientContext* context, const ::GetByNoRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::EmployeeResponse>>(AsyncGetByNoRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::EmployeeResponse>> PrepareAsyncGetByNo(::grpc::ClientContext* context, const ::GetByNoRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::EmployeeResponse>>(PrepareAsyncGetByNoRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientReaderInterface< ::EmployeeResponse>> GetAll(::grpc::ClientContext* context, const ::GetAllRequest& request) {
      return std::unique_ptr< ::grpc::ClientReaderInterface< ::EmployeeResponse>>(GetAllRaw(context, request));
    }
    std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::EmployeeResponse>> AsyncGetAll(::grpc::ClientContext* context, const ::GetAllRequest& request, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::EmployeeResponse>>(AsyncGetAllRaw(context, request, cq, tag));
    }
    std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::EmployeeResponse>> PrepareAsyncGetAll(::grpc::ClientContext* context, const ::GetAllRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::EmployeeResponse>>(PrepareAsyncGetAllRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientWriterInterface< ::AddPhotoRequest>> AddPhoto(::grpc::ClientContext* context, ::AddPhotoResponse* response) {
      return std::unique_ptr< ::grpc::ClientWriterInterface< ::AddPhotoRequest>>(AddPhotoRaw(context, response));
    }
    std::unique_ptr< ::grpc::ClientAsyncWriterInterface< ::AddPhotoRequest>> AsyncAddPhoto(::grpc::ClientContext* context, ::AddPhotoResponse* response, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncWriterInterface< ::AddPhotoRequest>>(AsyncAddPhotoRaw(context, response, cq, tag));
    }
    std::unique_ptr< ::grpc::ClientAsyncWriterInterface< ::AddPhotoRequest>> PrepareAsyncAddPhoto(::grpc::ClientContext* context, ::AddPhotoResponse* response, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncWriterInterface< ::AddPhotoRequest>>(PrepareAsyncAddPhotoRaw(context, response, cq));
    }
    virtual ::grpc::Status Save(::grpc::ClientContext* context, const ::EmployeeRequest& request, ::EmployeeResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::EmployeeResponse>> AsyncSave(::grpc::ClientContext* context, const ::EmployeeRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::EmployeeResponse>>(AsyncSaveRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::EmployeeResponse>> PrepareAsyncSave(::grpc::ClientContext* context, const ::EmployeeRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::EmployeeResponse>>(PrepareAsyncSaveRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientReaderWriterInterface< ::EmployeeRequest, ::EmployeeResponse>> SaveAll(::grpc::ClientContext* context) {
      return std::unique_ptr< ::grpc::ClientReaderWriterInterface< ::EmployeeRequest, ::EmployeeResponse>>(SaveAllRaw(context));
    }
    std::unique_ptr< ::grpc::ClientAsyncReaderWriterInterface< ::EmployeeRequest, ::EmployeeResponse>> AsyncSaveAll(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderWriterInterface< ::EmployeeRequest, ::EmployeeResponse>>(AsyncSaveAllRaw(context, cq, tag));
    }
    std::unique_ptr< ::grpc::ClientAsyncReaderWriterInterface< ::EmployeeRequest, ::EmployeeResponse>> PrepareAsyncSaveAll(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderWriterInterface< ::EmployeeRequest, ::EmployeeResponse>>(PrepareAsyncSaveAllRaw(context, cq));
    }
    virtual ::grpc::Status CreateToken(::grpc::ClientContext* context, const ::TokenRequest& request, ::TokenResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::TokenResponse>> AsyncCreateToken(::grpc::ClientContext* context, const ::TokenRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::TokenResponse>>(AsyncCreateTokenRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::TokenResponse>> PrepareAsyncCreateToken(::grpc::ClientContext* context, const ::TokenRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::TokenResponse>>(PrepareAsyncCreateTokenRaw(context, request, cq));
    }
    class async_interface {
     public:
      virtual ~async_interface() {}
      virtual void GetByNo(::grpc::ClientContext* context, const ::GetByNoRequest* request, ::EmployeeResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void GetByNo(::grpc::ClientContext* context, const ::GetByNoRequest* request, ::EmployeeResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void GetAll(::grpc::ClientContext* context, const ::GetAllRequest* request, ::grpc::ClientReadReactor< ::EmployeeResponse>* reactor) = 0;
      virtual void AddPhoto(::grpc::ClientContext* context, ::AddPhotoResponse* response, ::grpc::ClientWriteReactor< ::AddPhotoRequest>* reactor) = 0;
      virtual void Save(::grpc::ClientContext* context, const ::EmployeeRequest* request, ::EmployeeResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void Save(::grpc::ClientContext* context, const ::EmployeeRequest* request, ::EmployeeResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void SaveAll(::grpc::ClientContext* context, ::grpc::ClientBidiReactor< ::EmployeeRequest,::EmployeeResponse>* reactor) = 0;
      virtual void CreateToken(::grpc::ClientContext* context, const ::TokenRequest* request, ::TokenResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void CreateToken(::grpc::ClientContext* context, const ::TokenRequest* request, ::TokenResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
    };
    typedef class async_interface experimental_async_interface;
    virtual class async_interface* async() { return nullptr; }
    class async_interface* experimental_async() { return async(); }
   private:
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::EmployeeResponse>* AsyncGetByNoRaw(::grpc::ClientContext* context, const ::GetByNoRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::EmployeeResponse>* PrepareAsyncGetByNoRaw(::grpc::ClientContext* context, const ::GetByNoRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientReaderInterface< ::EmployeeResponse>* GetAllRaw(::grpc::ClientContext* context, const ::GetAllRequest& request) = 0;
    virtual ::grpc::ClientAsyncReaderInterface< ::EmployeeResponse>* AsyncGetAllRaw(::grpc::ClientContext* context, const ::GetAllRequest& request, ::grpc::CompletionQueue* cq, void* tag) = 0;
    virtual ::grpc::ClientAsyncReaderInterface< ::EmployeeResponse>* PrepareAsyncGetAllRaw(::grpc::ClientContext* context, const ::GetAllRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientWriterInterface< ::AddPhotoRequest>* AddPhotoRaw(::grpc::ClientContext* context, ::AddPhotoResponse* response) = 0;
    virtual ::grpc::ClientAsyncWriterInterface< ::AddPhotoRequest>* AsyncAddPhotoRaw(::grpc::ClientContext* context, ::AddPhotoResponse* response, ::grpc::CompletionQueue* cq, void* tag) = 0;
    virtual ::grpc::ClientAsyncWriterInterface< ::AddPhotoRequest>* PrepareAsyncAddPhotoRaw(::grpc::ClientContext* context, ::AddPhotoResponse* response, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::EmployeeResponse>* AsyncSaveRaw(::grpc::ClientContext* context, const ::EmployeeRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::EmployeeResponse>* PrepareAsyncSaveRaw(::grpc::ClientContext* context, const ::EmployeeRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientReaderWriterInterface< ::EmployeeRequest, ::EmployeeResponse>* SaveAllRaw(::grpc::ClientContext* context) = 0;
    virtual ::grpc::ClientAsyncReaderWriterInterface< ::EmployeeRequest, ::EmployeeResponse>* AsyncSaveAllRaw(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq, void* tag) = 0;
    virtual ::grpc::ClientAsyncReaderWriterInterface< ::EmployeeRequest, ::EmployeeResponse>* PrepareAsyncSaveAllRaw(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::TokenResponse>* AsyncCreateTokenRaw(::grpc::ClientContext* context, const ::TokenRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::TokenResponse>* PrepareAsyncCreateTokenRaw(::grpc::ClientContext* context, const ::TokenRequest& request, ::grpc::CompletionQueue* cq) = 0;
  };
  class Stub final : public StubInterface {
   public:
    Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());
    ::grpc::Status GetByNo(::grpc::ClientContext* context, const ::GetByNoRequest& request, ::EmployeeResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::EmployeeResponse>> AsyncGetByNo(::grpc::ClientContext* context, const ::GetByNoRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::EmployeeResponse>>(AsyncGetByNoRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::EmployeeResponse>> PrepareAsyncGetByNo(::grpc::ClientContext* context, const ::GetByNoRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::EmployeeResponse>>(PrepareAsyncGetByNoRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientReader< ::EmployeeResponse>> GetAll(::grpc::ClientContext* context, const ::GetAllRequest& request) {
      return std::unique_ptr< ::grpc::ClientReader< ::EmployeeResponse>>(GetAllRaw(context, request));
    }
    std::unique_ptr< ::grpc::ClientAsyncReader< ::EmployeeResponse>> AsyncGetAll(::grpc::ClientContext* context, const ::GetAllRequest& request, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncReader< ::EmployeeResponse>>(AsyncGetAllRaw(context, request, cq, tag));
    }
    std::unique_ptr< ::grpc::ClientAsyncReader< ::EmployeeResponse>> PrepareAsyncGetAll(::grpc::ClientContext* context, const ::GetAllRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncReader< ::EmployeeResponse>>(PrepareAsyncGetAllRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientWriter< ::AddPhotoRequest>> AddPhoto(::grpc::ClientContext* context, ::AddPhotoResponse* response) {
      return std::unique_ptr< ::grpc::ClientWriter< ::AddPhotoRequest>>(AddPhotoRaw(context, response));
    }
    std::unique_ptr< ::grpc::ClientAsyncWriter< ::AddPhotoRequest>> AsyncAddPhoto(::grpc::ClientContext* context, ::AddPhotoResponse* response, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncWriter< ::AddPhotoRequest>>(AsyncAddPhotoRaw(context, response, cq, tag));
    }
    std::unique_ptr< ::grpc::ClientAsyncWriter< ::AddPhotoRequest>> PrepareAsyncAddPhoto(::grpc::ClientContext* context, ::AddPhotoResponse* response, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncWriter< ::AddPhotoRequest>>(PrepareAsyncAddPhotoRaw(context, response, cq));
    }
    ::grpc::Status Save(::grpc::ClientContext* context, const ::EmployeeRequest& request, ::EmployeeResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::EmployeeResponse>> AsyncSave(::grpc::ClientContext* context, const ::EmployeeRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::EmployeeResponse>>(AsyncSaveRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::EmployeeResponse>> PrepareAsyncSave(::grpc::ClientContext* context, const ::EmployeeRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::EmployeeResponse>>(PrepareAsyncSaveRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientReaderWriter< ::EmployeeRequest, ::EmployeeResponse>> SaveAll(::grpc::ClientContext* context) {
      return std::unique_ptr< ::grpc::ClientReaderWriter< ::EmployeeRequest, ::EmployeeResponse>>(SaveAllRaw(context));
    }
    std::unique_ptr<  ::grpc::ClientAsyncReaderWriter< ::EmployeeRequest, ::EmployeeResponse>> AsyncSaveAll(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderWriter< ::EmployeeRequest, ::EmployeeResponse>>(AsyncSaveAllRaw(context, cq, tag));
    }
    std::unique_ptr<  ::grpc::ClientAsyncReaderWriter< ::EmployeeRequest, ::EmployeeResponse>> PrepareAsyncSaveAll(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderWriter< ::EmployeeRequest, ::EmployeeResponse>>(PrepareAsyncSaveAllRaw(context, cq));
    }
    ::grpc::Status CreateToken(::grpc::ClientContext* context, const ::TokenRequest& request, ::TokenResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::TokenResponse>> AsyncCreateToken(::grpc::ClientContext* context, const ::TokenRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::TokenResponse>>(AsyncCreateTokenRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::TokenResponse>> PrepareAsyncCreateToken(::grpc::ClientContext* context, const ::TokenRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::TokenResponse>>(PrepareAsyncCreateTokenRaw(context, request, cq));
    }
    class async final :
      public StubInterface::async_interface {
     public:
      void GetByNo(::grpc::ClientContext* context, const ::GetByNoRequest* request, ::EmployeeResponse* response, std::function<void(::grpc::Status)>) override;
      void GetByNo(::grpc::ClientContext* context, const ::GetByNoRequest* request, ::EmployeeResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void GetAll(::grpc::ClientContext* context, const ::GetAllRequest* request, ::grpc::ClientReadReactor< ::EmployeeResponse>* reactor) override;
      void AddPhoto(::grpc::ClientContext* context, ::AddPhotoResponse* response, ::grpc::ClientWriteReactor< ::AddPhotoRequest>* reactor) override;
      void Save(::grpc::ClientContext* context, const ::EmployeeRequest* request, ::EmployeeResponse* response, std::function<void(::grpc::Status)>) override;
      void Save(::grpc::ClientContext* context, const ::EmployeeRequest* request, ::EmployeeResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void SaveAll(::grpc::ClientContext* context, ::grpc::ClientBidiReactor< ::EmployeeRequest,::EmployeeResponse>* reactor) override;
      void CreateToken(::grpc::ClientContext* context, const ::TokenRequest* request, ::TokenResponse* response, std::function<void(::grpc::Status)>) override;
      void CreateToken(::grpc::ClientContext* context, const ::TokenRequest* request, ::TokenResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
     private:
      friend class Stub;
      explicit async(Stub* stub): stub_(stub) { }
      Stub* stub() { return stub_; }
      Stub* stub_;
    };
    class async* async() override { return &async_stub_; }

   private:
    std::shared_ptr< ::grpc::ChannelInterface> channel_;
    class async async_stub_{this};
    ::grpc::ClientAsyncResponseReader< ::EmployeeResponse>* AsyncGetByNoRaw(::grpc::ClientContext* context, const ::GetByNoRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::EmployeeResponse>* PrepareAsyncGetByNoRaw(::grpc::ClientContext* context, const ::GetByNoRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientReader< ::EmployeeResponse>* GetAllRaw(::grpc::ClientContext* context, const ::GetAllRequest& request) override;
    ::grpc::ClientAsyncReader< ::EmployeeResponse>* AsyncGetAllRaw(::grpc::ClientContext* context, const ::GetAllRequest& request, ::grpc::CompletionQueue* cq, void* tag) override;
    ::grpc::ClientAsyncReader< ::EmployeeResponse>* PrepareAsyncGetAllRaw(::grpc::ClientContext* context, const ::GetAllRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientWriter< ::AddPhotoRequest>* AddPhotoRaw(::grpc::ClientContext* context, ::AddPhotoResponse* response) override;
    ::grpc::ClientAsyncWriter< ::AddPhotoRequest>* AsyncAddPhotoRaw(::grpc::ClientContext* context, ::AddPhotoResponse* response, ::grpc::CompletionQueue* cq, void* tag) override;
    ::grpc::ClientAsyncWriter< ::AddPhotoRequest>* PrepareAsyncAddPhotoRaw(::grpc::ClientContext* context, ::AddPhotoResponse* response, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::EmployeeResponse>* AsyncSaveRaw(::grpc::ClientContext* context, const ::EmployeeRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::EmployeeResponse>* PrepareAsyncSaveRaw(::grpc::ClientContext* context, const ::EmployeeRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientReaderWriter< ::EmployeeRequest, ::EmployeeResponse>* SaveAllRaw(::grpc::ClientContext* context) override;
    ::grpc::ClientAsyncReaderWriter< ::EmployeeRequest, ::EmployeeResponse>* AsyncSaveAllRaw(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq, void* tag) override;
    ::grpc::ClientAsyncReaderWriter< ::EmployeeRequest, ::EmployeeResponse>* PrepareAsyncSaveAllRaw(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::TokenResponse>* AsyncCreateTokenRaw(::grpc::ClientContext* context, const ::TokenRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::TokenResponse>* PrepareAsyncCreateTokenRaw(::grpc::ClientContext* context, const ::TokenRequest& request, ::grpc::CompletionQueue* cq) override;
    const ::grpc::internal::RpcMethod rpcmethod_GetByNo_;
    const ::grpc::internal::RpcMethod rpcmethod_GetAll_;
    const ::grpc::internal::RpcMethod rpcmethod_AddPhoto_;
    const ::grpc::internal::RpcMethod rpcmethod_Save_;
    const ::grpc::internal::RpcMethod rpcmethod_SaveAll_;
    const ::grpc::internal::RpcMethod rpcmethod_CreateToken_;
  };
  static std::unique_ptr<Stub> NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());

  class Service : public ::grpc::Service {
   public:
    Service();
    virtual ~Service();
    virtual ::grpc::Status GetByNo(::grpc::ServerContext* context, const ::GetByNoRequest* request, ::EmployeeResponse* response);
    virtual ::grpc::Status GetAll(::grpc::ServerContext* context, const ::GetAllRequest* request, ::grpc::ServerWriter< ::EmployeeResponse>* writer);
    virtual ::grpc::Status AddPhoto(::grpc::ServerContext* context, ::grpc::ServerReader< ::AddPhotoRequest>* reader, ::AddPhotoResponse* response);
    virtual ::grpc::Status Save(::grpc::ServerContext* context, const ::EmployeeRequest* request, ::EmployeeResponse* response);
    virtual ::grpc::Status SaveAll(::grpc::ServerContext* context, ::grpc::ServerReaderWriter< ::EmployeeResponse, ::EmployeeRequest>* stream);
    virtual ::grpc::Status CreateToken(::grpc::ServerContext* context, const ::TokenRequest* request, ::TokenResponse* response);
  };
  template <class BaseClass>
  class WithAsyncMethod_GetByNo : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_GetByNo() {
      ::grpc::Service::MarkMethodAsync(0);
    }
    ~WithAsyncMethod_GetByNo() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetByNo(::grpc::ServerContext* /*context*/, const ::GetByNoRequest* /*request*/, ::EmployeeResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetByNo(::grpc::ServerContext* context, ::GetByNoRequest* request, ::grpc::ServerAsyncResponseWriter< ::EmployeeResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_GetAll : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_GetAll() {
      ::grpc::Service::MarkMethodAsync(1);
    }
    ~WithAsyncMethod_GetAll() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetAll(::grpc::ServerContext* /*context*/, const ::GetAllRequest* /*request*/, ::grpc::ServerWriter< ::EmployeeResponse>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetAll(::grpc::ServerContext* context, ::GetAllRequest* request, ::grpc::ServerAsyncWriter< ::EmployeeResponse>* writer, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncServerStreaming(1, context, request, writer, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_AddPhoto : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_AddPhoto() {
      ::grpc::Service::MarkMethodAsync(2);
    }
    ~WithAsyncMethod_AddPhoto() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status AddPhoto(::grpc::ServerContext* /*context*/, ::grpc::ServerReader< ::AddPhotoRequest>* /*reader*/, ::AddPhotoResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestAddPhoto(::grpc::ServerContext* context, ::grpc::ServerAsyncReader< ::AddPhotoResponse, ::AddPhotoRequest>* reader, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncClientStreaming(2, context, reader, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_Save : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_Save() {
      ::grpc::Service::MarkMethodAsync(3);
    }
    ~WithAsyncMethod_Save() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Save(::grpc::ServerContext* /*context*/, const ::EmployeeRequest* /*request*/, ::EmployeeResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestSave(::grpc::ServerContext* context, ::EmployeeRequest* request, ::grpc::ServerAsyncResponseWriter< ::EmployeeResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(3, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_SaveAll : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_SaveAll() {
      ::grpc::Service::MarkMethodAsync(4);
    }
    ~WithAsyncMethod_SaveAll() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SaveAll(::grpc::ServerContext* /*context*/, ::grpc::ServerReaderWriter< ::EmployeeResponse, ::EmployeeRequest>* /*stream*/)  override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestSaveAll(::grpc::ServerContext* context, ::grpc::ServerAsyncReaderWriter< ::EmployeeResponse, ::EmployeeRequest>* stream, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncBidiStreaming(4, context, stream, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_CreateToken : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_CreateToken() {
      ::grpc::Service::MarkMethodAsync(5);
    }
    ~WithAsyncMethod_CreateToken() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CreateToken(::grpc::ServerContext* /*context*/, const ::TokenRequest* /*request*/, ::TokenResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestCreateToken(::grpc::ServerContext* context, ::TokenRequest* request, ::grpc::ServerAsyncResponseWriter< ::TokenResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(5, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  typedef WithAsyncMethod_GetByNo<WithAsyncMethod_GetAll<WithAsyncMethod_AddPhoto<WithAsyncMethod_Save<WithAsyncMethod_SaveAll<WithAsyncMethod_CreateToken<Service > > > > > > AsyncService;
  template <class BaseClass>
  class WithCallbackMethod_GetByNo : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_GetByNo() {
      ::grpc::Service::MarkMethodCallback(0,
          new ::grpc::internal::CallbackUnaryHandler< ::GetByNoRequest, ::EmployeeResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::GetByNoRequest* request, ::EmployeeResponse* response) { return this->GetByNo(context, request, response); }));}
    void SetMessageAllocatorFor_GetByNo(
        ::grpc::MessageAllocator< ::GetByNoRequest, ::EmployeeResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(0);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::GetByNoRequest, ::EmployeeResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_GetByNo() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetByNo(::grpc::ServerContext* /*context*/, const ::GetByNoRequest* /*request*/, ::EmployeeResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* GetByNo(
      ::grpc::CallbackServerContext* /*context*/, const ::GetByNoRequest* /*request*/, ::EmployeeResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_GetAll : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_GetAll() {
      ::grpc::Service::MarkMethodCallback(1,
          new ::grpc::internal::CallbackServerStreamingHandler< ::GetAllRequest, ::EmployeeResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::GetAllRequest* request) { return this->GetAll(context, request); }));
    }
    ~WithCallbackMethod_GetAll() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetAll(::grpc::ServerContext* /*context*/, const ::GetAllRequest* /*request*/, ::grpc::ServerWriter< ::EmployeeResponse>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerWriteReactor< ::EmployeeResponse>* GetAll(
      ::grpc::CallbackServerContext* /*context*/, const ::GetAllRequest* /*request*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_AddPhoto : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_AddPhoto() {
      ::grpc::Service::MarkMethodCallback(2,
          new ::grpc::internal::CallbackClientStreamingHandler< ::AddPhotoRequest, ::AddPhotoResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, ::AddPhotoResponse* response) { return this->AddPhoto(context, response); }));
    }
    ~WithCallbackMethod_AddPhoto() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status AddPhoto(::grpc::ServerContext* /*context*/, ::grpc::ServerReader< ::AddPhotoRequest>* /*reader*/, ::AddPhotoResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerReadReactor< ::AddPhotoRequest>* AddPhoto(
      ::grpc::CallbackServerContext* /*context*/, ::AddPhotoResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_Save : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_Save() {
      ::grpc::Service::MarkMethodCallback(3,
          new ::grpc::internal::CallbackUnaryHandler< ::EmployeeRequest, ::EmployeeResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::EmployeeRequest* request, ::EmployeeResponse* response) { return this->Save(context, request, response); }));}
    void SetMessageAllocatorFor_Save(
        ::grpc::MessageAllocator< ::EmployeeRequest, ::EmployeeResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(3);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::EmployeeRequest, ::EmployeeResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_Save() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Save(::grpc::ServerContext* /*context*/, const ::EmployeeRequest* /*request*/, ::EmployeeResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* Save(
      ::grpc::CallbackServerContext* /*context*/, const ::EmployeeRequest* /*request*/, ::EmployeeResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_SaveAll : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_SaveAll() {
      ::grpc::Service::MarkMethodCallback(4,
          new ::grpc::internal::CallbackBidiHandler< ::EmployeeRequest, ::EmployeeResponse>(
            [this](
                   ::grpc::CallbackServerContext* context) { return this->SaveAll(context); }));
    }
    ~WithCallbackMethod_SaveAll() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SaveAll(::grpc::ServerContext* /*context*/, ::grpc::ServerReaderWriter< ::EmployeeResponse, ::EmployeeRequest>* /*stream*/)  override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerBidiReactor< ::EmployeeRequest, ::EmployeeResponse>* SaveAll(
      ::grpc::CallbackServerContext* /*context*/)
      { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_CreateToken : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_CreateToken() {
      ::grpc::Service::MarkMethodCallback(5,
          new ::grpc::internal::CallbackUnaryHandler< ::TokenRequest, ::TokenResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::TokenRequest* request, ::TokenResponse* response) { return this->CreateToken(context, request, response); }));}
    void SetMessageAllocatorFor_CreateToken(
        ::grpc::MessageAllocator< ::TokenRequest, ::TokenResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(5);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::TokenRequest, ::TokenResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_CreateToken() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CreateToken(::grpc::ServerContext* /*context*/, const ::TokenRequest* /*request*/, ::TokenResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* CreateToken(
      ::grpc::CallbackServerContext* /*context*/, const ::TokenRequest* /*request*/, ::TokenResponse* /*response*/)  { return nullptr; }
  };
  typedef WithCallbackMethod_GetByNo<WithCallbackMethod_GetAll<WithCallbackMethod_AddPhoto<WithCallbackMethod_Save<WithCallbackMethod_SaveAll<WithCallbackMethod_CreateToken<Service > > > > > > CallbackService;
  typedef CallbackService ExperimentalCallbackService;
  template <class BaseClass>
  class WithGenericMethod_GetByNo : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_GetByNo() {
      ::grpc::Service::MarkMethodGeneric(0);
    }
    ~WithGenericMethod_GetByNo() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetByNo(::grpc::ServerContext* /*context*/, const ::GetByNoRequest* /*request*/, ::EmployeeResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_GetAll : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_GetAll() {
      ::grpc::Service::MarkMethodGeneric(1);
    }
    ~WithGenericMethod_GetAll() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetAll(::grpc::ServerContext* /*context*/, const ::GetAllRequest* /*request*/, ::grpc::ServerWriter< ::EmployeeResponse>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_AddPhoto : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_AddPhoto() {
      ::grpc::Service::MarkMethodGeneric(2);
    }
    ~WithGenericMethod_AddPhoto() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status AddPhoto(::grpc::ServerContext* /*context*/, ::grpc::ServerReader< ::AddPhotoRequest>* /*reader*/, ::AddPhotoResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_Save : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_Save() {
      ::grpc::Service::MarkMethodGeneric(3);
    }
    ~WithGenericMethod_Save() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Save(::grpc::ServerContext* /*context*/, const ::EmployeeRequest* /*request*/, ::EmployeeResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_SaveAll : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_SaveAll() {
      ::grpc::Service::MarkMethodGeneric(4);
    }
    ~WithGenericMethod_SaveAll() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SaveAll(::grpc::ServerContext* /*context*/, ::grpc::ServerReaderWriter< ::EmployeeResponse, ::EmployeeRequest>* /*stream*/)  override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_CreateToken : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_CreateToken() {
      ::grpc::Service::MarkMethodGeneric(5);
    }
    ~WithGenericMethod_CreateToken() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CreateToken(::grpc::ServerContext* /*context*/, const ::TokenRequest* /*request*/, ::TokenResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithRawMethod_GetByNo : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_GetByNo() {
      ::grpc::Service::MarkMethodRaw(0);
    }
    ~WithRawMethod_GetByNo() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetByNo(::grpc::ServerContext* /*context*/, const ::GetByNoRequest* /*request*/, ::EmployeeResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetByNo(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_GetAll : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_GetAll() {
      ::grpc::Service::MarkMethodRaw(1);
    }
    ~WithRawMethod_GetAll() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetAll(::grpc::ServerContext* /*context*/, const ::GetAllRequest* /*request*/, ::grpc::ServerWriter< ::EmployeeResponse>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetAll(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncWriter< ::grpc::ByteBuffer>* writer, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncServerStreaming(1, context, request, writer, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_AddPhoto : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_AddPhoto() {
      ::grpc::Service::MarkMethodRaw(2);
    }
    ~WithRawMethod_AddPhoto() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status AddPhoto(::grpc::ServerContext* /*context*/, ::grpc::ServerReader< ::AddPhotoRequest>* /*reader*/, ::AddPhotoResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestAddPhoto(::grpc::ServerContext* context, ::grpc::ServerAsyncReader< ::grpc::ByteBuffer, ::grpc::ByteBuffer>* reader, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncClientStreaming(2, context, reader, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_Save : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_Save() {
      ::grpc::Service::MarkMethodRaw(3);
    }
    ~WithRawMethod_Save() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Save(::grpc::ServerContext* /*context*/, const ::EmployeeRequest* /*request*/, ::EmployeeResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestSave(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(3, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_SaveAll : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_SaveAll() {
      ::grpc::Service::MarkMethodRaw(4);
    }
    ~WithRawMethod_SaveAll() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SaveAll(::grpc::ServerContext* /*context*/, ::grpc::ServerReaderWriter< ::EmployeeResponse, ::EmployeeRequest>* /*stream*/)  override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestSaveAll(::grpc::ServerContext* context, ::grpc::ServerAsyncReaderWriter< ::grpc::ByteBuffer, ::grpc::ByteBuffer>* stream, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncBidiStreaming(4, context, stream, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_CreateToken : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_CreateToken() {
      ::grpc::Service::MarkMethodRaw(5);
    }
    ~WithRawMethod_CreateToken() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CreateToken(::grpc::ServerContext* /*context*/, const ::TokenRequest* /*request*/, ::TokenResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestCreateToken(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(5, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_GetByNo : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_GetByNo() {
      ::grpc::Service::MarkMethodRawCallback(0,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->GetByNo(context, request, response); }));
    }
    ~WithRawCallbackMethod_GetByNo() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetByNo(::grpc::ServerContext* /*context*/, const ::GetByNoRequest* /*request*/, ::EmployeeResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* GetByNo(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_GetAll : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_GetAll() {
      ::grpc::Service::MarkMethodRawCallback(1,
          new ::grpc::internal::CallbackServerStreamingHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const::grpc::ByteBuffer* request) { return this->GetAll(context, request); }));
    }
    ~WithRawCallbackMethod_GetAll() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetAll(::grpc::ServerContext* /*context*/, const ::GetAllRequest* /*request*/, ::grpc::ServerWriter< ::EmployeeResponse>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerWriteReactor< ::grpc::ByteBuffer>* GetAll(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_AddPhoto : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_AddPhoto() {
      ::grpc::Service::MarkMethodRawCallback(2,
          new ::grpc::internal::CallbackClientStreamingHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, ::grpc::ByteBuffer* response) { return this->AddPhoto(context, response); }));
    }
    ~WithRawCallbackMethod_AddPhoto() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status AddPhoto(::grpc::ServerContext* /*context*/, ::grpc::ServerReader< ::AddPhotoRequest>* /*reader*/, ::AddPhotoResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerReadReactor< ::grpc::ByteBuffer>* AddPhoto(
      ::grpc::CallbackServerContext* /*context*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_Save : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_Save() {
      ::grpc::Service::MarkMethodRawCallback(3,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->Save(context, request, response); }));
    }
    ~WithRawCallbackMethod_Save() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Save(::grpc::ServerContext* /*context*/, const ::EmployeeRequest* /*request*/, ::EmployeeResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* Save(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_SaveAll : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_SaveAll() {
      ::grpc::Service::MarkMethodRawCallback(4,
          new ::grpc::internal::CallbackBidiHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context) { return this->SaveAll(context); }));
    }
    ~WithRawCallbackMethod_SaveAll() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SaveAll(::grpc::ServerContext* /*context*/, ::grpc::ServerReaderWriter< ::EmployeeResponse, ::EmployeeRequest>* /*stream*/)  override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerBidiReactor< ::grpc::ByteBuffer, ::grpc::ByteBuffer>* SaveAll(
      ::grpc::CallbackServerContext* /*context*/)
      { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_CreateToken : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_CreateToken() {
      ::grpc::Service::MarkMethodRawCallback(5,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->CreateToken(context, request, response); }));
    }
    ~WithRawCallbackMethod_CreateToken() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CreateToken(::grpc::ServerContext* /*context*/, const ::TokenRequest* /*request*/, ::TokenResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* CreateToken(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_GetByNo : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_GetByNo() {
      ::grpc::Service::MarkMethodStreamed(0,
        new ::grpc::internal::StreamedUnaryHandler<
          ::GetByNoRequest, ::EmployeeResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::GetByNoRequest, ::EmployeeResponse>* streamer) {
                       return this->StreamedGetByNo(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_GetByNo() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status GetByNo(::grpc::ServerContext* /*context*/, const ::GetByNoRequest* /*request*/, ::EmployeeResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedGetByNo(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::GetByNoRequest,::EmployeeResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_Save : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_Save() {
      ::grpc::Service::MarkMethodStreamed(3,
        new ::grpc::internal::StreamedUnaryHandler<
          ::EmployeeRequest, ::EmployeeResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::EmployeeRequest, ::EmployeeResponse>* streamer) {
                       return this->StreamedSave(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_Save() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status Save(::grpc::ServerContext* /*context*/, const ::EmployeeRequest* /*request*/, ::EmployeeResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedSave(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::EmployeeRequest,::EmployeeResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_CreateToken : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_CreateToken() {
      ::grpc::Service::MarkMethodStreamed(5,
        new ::grpc::internal::StreamedUnaryHandler<
          ::TokenRequest, ::TokenResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::TokenRequest, ::TokenResponse>* streamer) {
                       return this->StreamedCreateToken(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_CreateToken() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status CreateToken(::grpc::ServerContext* /*context*/, const ::TokenRequest* /*request*/, ::TokenResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedCreateToken(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::TokenRequest,::TokenResponse>* server_unary_streamer) = 0;
  };
  typedef WithStreamedUnaryMethod_GetByNo<WithStreamedUnaryMethod_Save<WithStreamedUnaryMethod_CreateToken<Service > > > StreamedUnaryService;
  template <class BaseClass>
  class WithSplitStreamingMethod_GetAll : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithSplitStreamingMethod_GetAll() {
      ::grpc::Service::MarkMethodStreamed(1,
        new ::grpc::internal::SplitServerStreamingHandler<
          ::GetAllRequest, ::EmployeeResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerSplitStreamer<
                     ::GetAllRequest, ::EmployeeResponse>* streamer) {
                       return this->StreamedGetAll(context,
                         streamer);
                  }));
    }
    ~WithSplitStreamingMethod_GetAll() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status GetAll(::grpc::ServerContext* /*context*/, const ::GetAllRequest* /*request*/, ::grpc::ServerWriter< ::EmployeeResponse>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with split streamed
    virtual ::grpc::Status StreamedGetAll(::grpc::ServerContext* context, ::grpc::ServerSplitStreamer< ::GetAllRequest,::EmployeeResponse>* server_split_streamer) = 0;
  };
  typedef WithSplitStreamingMethod_GetAll<Service > SplitStreamedService;
  typedef WithStreamedUnaryMethod_GetByNo<WithSplitStreamingMethod_GetAll<WithStreamedUnaryMethod_Save<WithStreamedUnaryMethod_CreateToken<Service > > > > StreamedService;
};


#endif  // GRPC_Messages_2eproto__INCLUDED
